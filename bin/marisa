#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'perfluo'

marisa = Perfluo::Bot.new

marisa.setup do
  def descreve_forma(forma)
    "#{forma} 3 x de 1000"
  end

  def descreve_forma_escolhida
    descreve_forma memo[:opcao_correta]
  end

  def autenticar
    memo[:email] = 'bla@example.com'
    memo[:cpf] = memo[:cpf_prefix] + '45678900'
  end

  def confirm_agreement
    say "Perfeito. Estou processando os dados e gerando seu boleto para pagamento at√© o dia #{memo[:vencimento]}"
    prompt :confirm_agreement
  end

  def confirmed?(k)
    v = memo[k]
    v =~ /\A[ys]\z|sim|ok|blz|uhum|yeap|yes|est[a√°]|isso|exac?t|verdade|confirm|correto|üëç|üëå/i
  end

  set_prompt :novo_email, 'Para qual email deseja que enviemos o boleto?' do
    success do
      say 'ok, email atualizado'
      memo[:email_to_send] = memo[:novo_email]
      confirm_agreement
    end
    failure do
      say 'oops.. nao entendi seu email'
    end
  end

  set_prompt :confirm_agreement do
    message { "Pronto! Para finalizar confirme a op√ß√£o escolhida:  #{descreve_forma_escolhida} e o  email #{memo[:email_to_send]}" }

    success do
      if confirmed?(:confirm_agreement)
        say 'Ok'
        say 'Acordo formalizado com sucesso'
        say 'Adianto que vc pode programar...'
        say 'Enviei email...'
        say 'caso necessite de algo...'
      else
        say 'Por hora essas sao as opcoes que tenho'
      end
    end

    failure do
      say 'oops.. nao entendi. Voce concorda?'
    end
  end

  set_prompt :email_ok do
    message { "Seu email ainda √© #{memo[:email]}?" }
    success do
      if confirmed?(:email_ok)
        say 'Legal....'
        memo[:email_to_send] = memo[:email]
        confirm_agreement
      else
        prompt :novo_email
      end
    end

    failure do
      say 'oops.. nao entendi'
    end
  end

  set_prompt :opcao_correta, 'Op√ß√£o escolhida est√° correta?' do
    success do
      if confirmed?(:opcao_correta)
        say 'Legal'
        prompt :email_ok
      else
        say 'ok, ent√£o qual vc deseja?'
        prompt :forma_parcelamento
      end
    end
    failure do
      say 'oops.. nao entendi'
    end
  end

  set_prompt :forma_parcelamento, ['A - A vista  R$ 1000,00', 'B - 2x 500   R$ 1000,00', 'C - 4x 250   R$ 1000,00', 'D - 5x 200   R$ 1000,00', 'E - 10x 100   R$ 1000,00', 'F Nenhuma forma te ajuda'].join("\n") do
    validates { |v| v.in? %w[A B C D E F] }

    success do
      say "Entendido! Voc√™ selecionou pagar em #{descreve_forma(memo[:forma_parcelamento])}"
      prompt :opcao_correta
    end

    failure do
      say 'oops.. opcao escolhida invalida'
    end
  end

  set_prompt :cpf_prefix, 'Quais s√£o os 3 primeiros n√∫meros do seu CPF?' do
    success do
      say 'procurando seu cadastro...'
      autenticar
      say "√ìtimo, acabei de confrmar o seu CPF: #{memo[:cpf]} "

      say "Seu d√©bito √© de R$ #{memo[:cpf_prefix].to_i * 2},99 e consegui √≥timas condi√ß√µes de pagamento. "

      say 'O vencimento √© para 25 de dezembro. Veja a forma que melhor atende a sua necessidade:'

      prompt :forma_parcelamento
    end
    failure do
      say 'oops.. tem certeza que esses s√£o os 3 d√≠gitos iniciais do seu cpf?'
    end
  end

  listen // do
    say [['Se precisar de mais alguma informacao chame 08002222222', 'Voc√™ pode aproveitar e visitar www.marisa.com.br']]
  end
  start do
    say ['Que bom poder falar com voc√™.', 'Sou a Ana, assistente virtual do Car√£o Marisa e gostaria de apresentar uma oportunidade incr√≠vel para voc√™ regularizar seu d√©bito.', 'Para ter acesso √†s condi√ß√µes oferecidas, precisamos que confirme algumas informa√ß√µes.']
    prompt :cpf_prefix
  end
end

memofile = "memo-#{ARGV.shift}.yml"

marisa.persistence = Perfluo::FilePersistence.new(memofile)
marisa.logger = Logger.new(STDOUT)
marisa.output = Perfluo::TerminalOutput.new
marisa.start!
if ARGV.any?
  msg = ARGV.flatten.join(' ')
  puts "<< #{msg}"

  marisa.react_to_listen(msg)
end

marisa.save!
